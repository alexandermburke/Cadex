// /app/api/submit-exam-answer/route.js

import { NextResponse } from 'next/server';
import OpenAI from 'openai';

export async function POST(request) {
  try {
    const { question, answer } = await request.json();

    if (!question || !answer) {
      console.warn('Incomplete exam submission received:', { question, answer });
      return NextResponse.json(
        { error: 'Question and answer are required.' },
        { status: 400 }
      );
    }

    // Construct your prompt for GPT
    const prompt = `You are an expert grader for the exam. ...\nQuestion:\n"${question}"\nUser's Answer:\n"${answer}"\n...`;

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo', // or 'gpt-4'
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 1000,
      temperature: 0.7,
    });

    if (
      !response ||
      !response.choices ||
      !Array.isArray(response.choices) ||
      response.choices.length === 0 ||
      !response.choices[0].message ||
      !response.choices[0].message.content
    ) {
      console.error('Unexpected response structure from OpenAI:', response);
      throw new Error('Unexpected response structure from OpenAI.');
    }

    const feedback = response.choices[0].message.content.trim();
    if (!feedback) {
      console.error('OpenAI did not return any feedback.');
      throw new Error('No feedback generated by the AI.');
    }

    return NextResponse.json({ feedback }, { status: 200 });
  } catch (error) {
    // Enhanced error handling
    if (error instanceof OpenAI.APIError) {
      console.error('OpenAI API error:', {
        status: error.status,
        message: error.message,
        code: error.code,
        type: error.type,
      });
      return NextResponse.json(
        {
          error: 'Failed to evaluate answer.',
          details: {
            status: error.status,
            message: error.message,
            code: error.code,
            type: error.type,
          },
        },
        { status: 500 }
      );
    } else if (error instanceof OpenAI.RequestError) {
      console.error('OpenAI Request error:', error);
      return NextResponse.json(
        { error: 'Network error while evaluating the answer.', details: error.message },
        { status: 500 }
      );
    } else if (error instanceof OpenAI.RateLimitError) {
      console.error('OpenAI Rate limit error:', error);
      return NextResponse.json(
        { error: 'Rate limit exceeded. Please try again later.', details: error.message },
        { status: 429 }
      );
    } else if (error instanceof OpenAI.UnknownError) {
      console.error('OpenAI Unknown error:', error);
      return NextResponse.json(
        { error: 'An unknown error occurred while evaluating the answer.', details: error.message },
        { status: 500 }
      );
    } else if (error.message) {
      console.error('General error:', error.message);
      return NextResponse.json(
        { error: 'Failed to evaluate answer.', details: error.message },
        { status: 500 }
      );
    } else {
      console.error('Unknown error:', error);
      return NextResponse.json(
        { error: 'An unknown error occurred while evaluating the answer.' },
        { status: 500 }
      );
    }
  }
}
