// /app/api/submit-exam-answer/route.js

import { NextResponse } from 'next/server';
import OpenAI from 'openai';

export async function POST(request) {
  try {
    // Parse the JSON body from the request
    const { question, answer } = await request.json();

    // Validate input parameters
    if (!question || !answer) {
      console.warn('Incomplete exam submission received:', { question, answer });
      return NextResponse.json(
        { error: 'Question and answer are required.' },
        { status: 400 }
      );
    }

    // Define the detailed prompt
    const prompt = `You are an expert grader for the exam. Evaluate the following answer to the question provided. Give detailed feedback on the correctness, legal reasoning, and areas for improvement. Provide the correct answer after the feedback.

Question:
"""
${question}
"""

User's Answer:
"""
${answer}
"""

Please provide your feedback in a clear and professional manner. State the model of GPT being used at the bottom of the feedback.`;

    // Initialize OpenAI API client
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY, // Ensure this is set in your environment variables
      // You can set other default options here if needed
    });

    // Make the API request to OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo', // Use 'gpt-4' or 'gpt-3.5-turbo' as needed
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 1000, // Adjust as needed
      temperature: 0.7, // Adjust as needed
    });

    // Validate the structure of the response
    if (
      !response ||
      !response.choices ||
      !Array.isArray(response.choices) ||
      response.choices.length === 0 ||
      !response.choices[0].message ||
      !response.choices[0].message.content
    ) {
      console.error('Unexpected response structure from OpenAI:', response);
      throw new Error('Unexpected response structure from OpenAI.');
    }

    const feedback = response.choices[0].message.content.trim();

    // Check if feedback was generated
    if (!feedback) {
      console.error('OpenAI did not return any feedback.');
      throw new Error('No feedback generated by the AI.');
    }

    // Return the generated feedback
    return NextResponse.json({ feedback }, { status: 200 });
  } catch (error) {
    // Enhanced error logging and response
    if (error instanceof OpenAI.APIError) {
      // OpenAI API specific error
      console.error('OpenAI API error:', {
        status: error.status,
        message: error.message,
        code: error.code,
        type: error.type,
      });
      return NextResponse.json(
        {
          error: 'Failed to evaluate answer.',
          details: {
            status: error.status,
            message: error.message,
            code: error.code,
            type: error.type,
          },
        },
        { status: 500 }
      );
    } else if (error instanceof OpenAI.RequestError) {
      // Network or request error
      console.error('OpenAI Request error:', error);
      return NextResponse.json(
        {
          error: 'Network error while evaluating the answer.',
          details: error.message,
        },
        { status: 500 }
      );
    } else if (error instanceof OpenAI.RateLimitError) {
      // Rate limit exceeded
      console.error('OpenAI Rate limit error:', error);
      return NextResponse.json(
        {
          error: 'Rate limit exceeded. Please try again later.',
          details: error.message,
        },
        { status: 429 }
      );
    } else if (error instanceof OpenAI.UnknownError) {
      // Unknown error
      console.error('OpenAI Unknown error:', error);
      return NextResponse.json(
        {
          error: 'An unknown error occurred while evaluating the answer.',
          details: error.message,
        },
        { status: 500 }
      );
    } else if (error.message) {
      // General error
      console.error('General error:', error.message);
      return NextResponse.json(
        {
          error: 'Failed to evaluate answer.',
          details: error.message,
        },
        { status: 500 }
      );
    } else {
      // Fallback error
      console.error('Unknown error:', error);
      return NextResponse.json(
        {
          error: 'An unknown error occurred while evaluating the answer.',
        },
        { status: 500 }
      );
    }
  }
}
