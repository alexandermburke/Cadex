// /app/api/submit-exam-answer/route.js

import OpenAI from 'openai';
import { NextResponse } from 'next/server';

export async function POST(request) {
    try {
        const { question, answer } = await request.json();

        if (!question || !answer) {
            return NextResponse.json({ error: 'Question and answer are required.' }, { status: 400 });
        }

        // Check if OPENAI_API_KEY is available
        if (!process.env.OPENAI_API_KEY) {
            console.error('OPENAI_API_KEY is not set.');
            return NextResponse.json(
                { error: 'Server configuration error: OpenAI API key is missing.' },
                { status: 500 }
            );
        }

        const openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY,
        });

        // Define the prompt for the AI to evaluate the answer
        const prompt = `
You are an expert grader for the ${question.examType} exam. Evaluate the following answer to the question provided. Give detailed feedback on the correctness, legal reasoning, and areas for improvement. Provide the correct answer after the feedback.

Question:
"""
${question}
"""

User's Answer:
"""
${answer}
"""

Please provide your feedback in a clear and professional manner.
`;

        const response = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: [{ role: 'user', content: prompt }],
            max_tokens: 1000,
            temperature: 0.7,
        });

        const assistantMessage = response.choices?.[0]?.message?.content.trim();

        // Log the assistant's message for debugging
        console.log('Feedback:', assistantMessage);

        if (!assistantMessage) {
            throw new Error('No feedback generated by the AI.');
        }

        return NextResponse.json({ feedback: assistantMessage }, { status: 200 });
    } catch (error) {
        console.error('Error during OpenAI API call:', error.response?.data || error.message);
        return NextResponse.json(
            { error: 'Failed to evaluate answer', details: error.response?.data || error.message },
            { status: 500 }
        );
    }
}
