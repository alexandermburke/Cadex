// /app/api/get-exam-question/route.js

import { NextResponse } from 'next/server';
import OpenAI from 'openai';

export async function POST(request) {
  try {
    // Parse the JSON body from the request
    const { examType, difficulty, lawType, selectedQuestionTypes } = await request.json();

    // Validate input parameters
    if (!examType || !difficulty || !lawType) {
      console.warn('Incomplete exam configuration received:', { examType, difficulty, lawType });
      return NextResponse.json(
        { error: 'Incomplete exam configuration. Please provide examType, difficulty, and lawType.' },
        { status: 400 }
      );
    }

    // Mapping difficulty levels to detailed descriptions
    const difficultyDetails = {
      // LSAT difficulty mapping
      'Below 150': 'basic understanding with straightforward scenarios',
      '150-160': 'intermediate understanding with moderate complexity',
      '160-170': 'advanced understanding with complex and nuanced scenarios',
      '175+': 'expert-level understanding with extremely complex and nuanced scenarios',
      // BAR difficulty mapping
      'Below Average': 'basic proficiency with fundamental concepts',
      'Average': 'solid proficiency with moderately challenging concepts',
      'Above Average': 'high proficiency with complex and challenging concepts',
      'Expert': 'very high proficiency with complex and extremely challenging concepts',
      // MPRE difficulty mapping
      'Basic': 'basic ethical understanding with simple scenarios',
      'Intermediate': 'intermediate ethical understanding with moderate complexity',
      'Advanced': 'advanced ethical understanding with complex and nuanced scenarios',
    };

    const difficultyDescription = difficultyDetails[difficulty] || difficulty;

    // Build the question types description for the prompt
    let questionTypesDescription = '';
    if (Array.isArray(selectedQuestionTypes) && selectedQuestionTypes.length > 0) {
      questionTypesDescription = '- **Question Focus**: The question should be of the following type(s):\n';
      selectedQuestionTypes.forEach((type) => {
        questionTypesDescription += `  - ${type}\n`;
      });
    }

    // Define the detailed prompt
    const prompt = `You are an expert question writer for the ${examType}. Create a ${lawType} question that matches the style and format of a real ${examType} question.

- **Difficulty Level**: ${difficultyDescription}. The question should reflect the difficulty expected for a student aiming for a score of ${difficulty} on the ${examType}.
- **Question Type**: Ensure the question adheres to the types commonly found on the ${examType}, such as logical reasoning, analytical reasoning, reading comprehension (for LSAT), or essay questions (for Bar Exam), depending on the selected exam.
${questionTypesDescription ? questionTypesDescription : ''}
- **Content Focus**: The question should specifically address key concepts and complexities within ${lawType}, including any relevant subtopics or typical scenarios.
- **Style Guidelines**:
  - Use clear and precise language appropriate for the ${examType}.
  - The question should be well-structured and formatted as per the ${examType}'s standards.
  - **Format the question so that each answer choice starts on a new line and is clearly labeled with a letter (A), B), C), D), E)) followed by a space.**
  - Do not include any introductory explanations or answers.

Please provide only the question text, including the stem and answer choices, without any additional comments or answers.`;

    // Initialize OpenAI API client
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY, // Ensure this is set in your environment variables
    });

    // Make the API request to OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo', // Use 'gpt-4' or 'gpt-3.5-turbo' as needed
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 700, // Adjust as needed
      temperature: 0.7, // Adjust as needed
    });

    // Validate the structure of the response
    if (
      !response ||
      !response.choices ||
      !Array.isArray(response.choices) ||
      response.choices.length === 0 ||
      !response.choices[0].message ||
      !response.choices[0].message.content
    ) {
      console.error('Unexpected response structure from OpenAI:', response);
      throw new Error('Unexpected response structure from OpenAI.');
    }

    const question = response.choices[0].message.content.trim();

    // Check if a question was generated
    if (!question) {
      console.error('OpenAI did not return any question.');
      throw new Error('No question generated by the AI.');
    }

    // Return the generated question
    return NextResponse.json({ question }, { status: 200 });
  } catch (error) {
    console.error('Error generating exam question:', error);

    // Return an error response
    return NextResponse.json(
      { error: 'An error occurred while generating the exam question.' },
      { status: 500 }
    );
  }
}
